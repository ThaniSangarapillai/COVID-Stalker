{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\GitHub\\\\COVID\\\\covidstalker\\\\Components\\\\MapScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport * as Permissions from 'expo-permissions';\nimport * as Location from 'expo-location';\nimport MapView from 'react-native-maps';\nimport { Marker } from 'react-native-maps';\nimport { View } from 'native-base';\nimport { SearchBar } from 'react-native-elements';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Header } from 'react-native-elements';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Left, Right, Icon, Container } from 'native-base';\nvar Drawer = createDrawerNavigator();\n\nvar MapScreen = function (_Component) {\n  _inherits(MapScreen, _Component);\n\n  var _super = _createSuper(MapScreen);\n\n  function MapScreen() {\n    var _this;\n\n    _classCallCheck(this, MapScreen);\n\n    _this = _super.call(this);\n\n    _this._getLocation = function _callee() {\n      var _await$Permissions$as, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              if (status !== 'granted') {\n                console.log('Permission Denied!');\n\n                _this.setState({\n                  errorMessage: 'Permission Denied!'\n                });\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n            case 7:\n              location = _context.sent;\n\n              _this.setState({\n                location: {\n                  latitude: location.coords.latitude,\n                  longitude: location.coords.longitude\n                }\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.search = function (search) {\n      if (search == \"\") {\n        return;\n      }\n\n      fetch(\"https://maps.googleapis.com/maps/api/place/findplacefromtext/json?key=AIzaSyA1ZRbmrfVoexPgAOYXWk3lIY4OkjSGNSE&input=\" + search + \"&inputtype=textquery&fields=formatted_address,geometry\").then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        if (responseJson.status == \"INVALID_REQUEST\") {\n          return alert(\"Error: Invalid request.\");\n        }\n\n        var resObj = responseJson.candidates[0];\n\n        if (!resObj) {\n          return alert(\"Error: response object undefined (most likely location not found).\");\n        }\n\n        _this.setState({\n          dest: {\n            address: resObj.formatted_address,\n            longitude: resObj.geometry.location.lng,\n            latitude: resObj.geometry.location.lat\n          }\n        });\n\n        console.log(_this.state.dest);\n        Alert.alert(\"Routing to \" + search, _this.state.dest.address, [{\n          text: 'OK'\n        }], {\n          cancelable: false\n        });\n      }).catch(function (error) {\n        console.error(error);\n      });\n      fetch('http://localhost:3000/poll_location', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: 1,\n          latitude: _this.state.location.latitude,\n          longitude: _this.state.location.longitude\n        })\n      });\n      return;\n    };\n\n    _this.updateSearch = function (search) {\n      _this.setState({\n        search: search\n      });\n\n      clearTimeout(_this.state.searchTimeout);\n      _this.state.searchTimeout = setTimeout(function () {\n        _this.search(search);\n      }, 1000);\n    };\n\n    _this.state = {\n      location: null,\n      errorMessage: null,\n      search: '',\n      searchTimeout: null,\n      dest: {},\n      route: [],\n      markers: []\n    };\n    return _this;\n  }\n\n  _createClass(MapScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._getLocation();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var latitude, longitude;\n      latitude = 0;\n      longitude = 0;\n\n      if (this.state.location) {\n        latitude = this.state.location.latitude;\n        longitude = this.state.location.longitude;\n      }\n\n      var marker = this.state.dest.latitude && this.state.dest.longitude ? React.createElement(MapView.Marker, {\n        key: 1,\n        coordinate: {\n          longitude: this.state.dest.longitude,\n          latitude: this.state.dest.latitude\n        },\n        pinColor: \"red\",\n        title: \"Your Destination\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 75\n        }\n      }) : null;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, React.createElement(Left, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }\n      }, React.createElement(Icon, {\n        style: {\n          color: \"#ffffff\"\n        },\n        name: \"menu\",\n        onPress: function onPress() {\n          return alert(\"haha\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }\n      }))), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, React.createElement(SearchBar, {\n        showLoadingIcon: true,\n        lightTheme: true,\n        placeholder: \"Find destination...\",\n        value: this.state.search,\n        onChangeText: this.updateSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }\n      })), React.createElement(MapView, {\n        style: {\n          alignSelf: 'stretch',\n          height: '80%'\n        },\n        region: {\n          latitude: latitude,\n          longitude: longitude,\n          latitudeDelta: 0.043,\n          longitudeDelta: 0.034\n        },\n        showsUserLocation: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }\n      }, marker));\n    }\n  }]);\n\n  return MapScreen;\n}(Component);\n\nexport default MapScreen;","map":{"version":3,"sources":["D:/GitHub/COVID/covidstalker/Components/MapScreen.js"],"names":["React","Component","Permissions","Location","MapView","Marker","View","SearchBar","Header","createDrawerNavigator","Left","Right","Icon","Container","Drawer","MapScreen","_getLocation","askAsync","LOCATION","status","console","log","setState","errorMessage","getCurrentPositionAsync","location","latitude","coords","longitude","search","fetch","then","response","json","responseJson","alert","resObj","candidates","dest","address","formatted_address","geometry","lng","lat","state","Alert","text","cancelable","catch","error","method","headers","body","JSON","stringify","user_id","updateSearch","clearTimeout","searchTimeout","setTimeout","route","markers","marker","color","alignSelf","height","latitudeDelta","longitudeDelta"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as Permissions from 'expo-permissions';\r\nimport * as Location from 'expo-location';\r\nimport MapView from 'react-native-maps';\r\nimport {Marker} from 'react-native-maps';\r\nimport { View } from 'native-base';\r\nimport {SearchBar} from 'react-native-elements';   \r\nimport {Alert} from 'react-native';\r\nimport { Header } from 'react-native-elements';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { Left, Right, Icon, Container } from 'native-base';\r\n/* side menu? */\r\nconst Drawer = createDrawerNavigator();\r\n\r\nclass MapScreen extends Component{\r\n    constructor(){\r\n      super();\r\n      this.state = {\r\n        location: null,\r\n        errorMessage: null,\r\n        search: '',\r\n        searchTimeout: null, //timeout to prevent search spamming\r\n        dest:{}, //destination data\r\n        route: [],\r\n        markers: []\r\n      };\r\n    }\r\n    \r\n    componentDidMount() {\r\n      this._getLocation();\r\n\r\n    }\r\n    _getLocation = async () => {\r\n      \r\n      const { status } = await Permissions.askAsync(Permissions.LOCATION);\r\n      if (status !== 'granted') {\r\n        console.log('Permission Denied!');\r\n  \r\n        this.setState({\r\n          errorMessage: 'Permission Denied!'\r\n        })\r\n      }\r\n      \r\n      const location = await Location.getCurrentPositionAsync();\r\n      this.setState({\r\n        location: {\r\n          latitude: location.coords.latitude,\r\n          longitude: location.coords.longitude  \r\n        }\r\n      })\r\n    } \r\n\r\n  search = (search)=>{\r\n    if(search == \"\"){\r\n      return;\r\n    }\r\n    \r\n    fetch(`https://maps.googleapis.com/maps/api/place/findplacefromtext/json?key=AIzaSyA1ZRbmrfVoexPgAOYXWk3lIY4OkjSGNSE&input=${search}&inputtype=textquery&fields=formatted_address,geometry`)\r\n    .then(response => response.json())\r\n    .then(responseJson => {\r\n      if(responseJson.status == \"INVALID_REQUEST\"){\r\n        return alert(\"Error: Invalid request.\");\r\n      }\r\n      const resObj = responseJson.candidates[0];\r\n      if(!resObj){\r\n        return alert(\"Error: response object undefined (most likely location not found).\");\r\n      }\r\n      this.setState(\r\n        {\r\n          dest: \r\n          {address: resObj.formatted_address, \r\n           longitude: resObj.geometry.location.lng, \r\n           latitude: resObj.geometry.location.lat\r\n          }\r\n        }\r\n      );\r\n      console.log(this.state.dest);\r\n      Alert.alert(\r\n        `Routing to ${search}`,\r\n        this.state.dest.address,\r\n        [\r\n          { text: 'OK' },\r\n        ],\r\n        { cancelable: false }\r\n      );\r\n\r\n    })\r\n    .catch(error => {\r\n      console.error(error);\r\n    });\r\n\r\n\r\n    //send ur data to server \r\n  fetch('http://localhost:3000/poll_location', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      user_id:1,\r\n      latitude: this.state.location.latitude,\r\n      longitude: this.state.location.longitude\r\n    }),\r\n  });\r\n    return;\r\n  }\r\n  updateSearch = search => {\r\n    this.setState({ search });\r\n    clearTimeout(this.state.searchTimeout);\r\n    this.state.searchTimeout = setTimeout(\r\n    () => {\r\n      this.search(search);\r\n    }, 1000);\r\n  };\r\n    render(){\r\n      let latitude, longitude;\r\n      latitude = 0;\r\n      longitude =  0;\r\n      \r\n      if(this.state.location){\r\n        latitude = this.state.location.latitude;\r\n        longitude = this.state.location.longitude;\r\n      }\r\n      const marker =this.state.dest.latitude &&this.state.dest.longitude ?<MapView.Marker key = {1} coordinate = {{longitude: this.state.dest.longitude, latitude:this.state.dest.latitude}} pinColor = 'red' title = 'Your Destination'></MapView.Marker> : null;\r\n      return(\r\n        <View>\r\n          <Header>\r\n            <Left>\r\n              <Icon style={{ color: \"#ffffff\" }} name=\"menu\" onPress={() => alert(\"haha\")} />\r\n            </Left>\r\n          </Header>\r\n            <View>\r\n              <SearchBar showLoadingIcon = {true} lightTheme = {true} placeholder = \"Find destination...\" value = {this.state.search} onChangeText = {this.updateSearch}/>\r\n          </View>\r\n          <MapView \r\n              style={{ alignSelf: 'stretch', height: '80%'}}\r\n              region={{\r\n                latitude: latitude,\r\n                longitude: longitude,\r\n                latitudeDelta: 0.043,\r\n                longitudeDelta: 0.034\r\n              }}\r\n              showsUserLocation = {true}\r\n              >\r\n            {marker}\r\n          </MapView>\r\n        </View>\r\n      )\r\n    }\r\n}\r\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}